/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\1\74\3\75\23\0\1\42\1\32\1\55\1\0\1\36\1\40\1\31\1\50\1\51\1\34\1\33"+
    "\1\46\1\27\1\30\1\35\1\26\11\25\1\54\1\47\1\44\1\43\1\45\2\0\1\72\1\67\1\57"+
    "\1\24\1\62\3\24\1\66\1\24\1\70\1\65\1\61\1\63\1\60\2\24\1\73\1\71\1\64\6\24"+
    "\1\0\1\56\1\0\1\37\1\21\1\0\1\7\1\10\1\11\1\20\1\17\1\4\1\15\1\12\1\1\1\24"+
    "\1\23\1\5\1\24\1\2\1\6\2\24\1\13\1\14\1\3\1\16\1\24\1\22\3\24\1\52\1\41\1"+
    "\53\7\0\1\75\242\0\2\75\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\2\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\2\1\30\20\2\1\31\1\0\1\3"+
    "\1\32\2\0\1\33\1\34\2\0\1\35\1\36\1\37"+
    "\1\0\1\40\1\0\1\41\2\2\1\42\16\2\1\43"+
    "\1\0\1\44\1\0\1\45\1\46\2\2\1\47\1\2"+
    "\1\50\1\51\5\2\1\52\3\2\1\53\1\0\1\54"+
    "\1\55\1\56\6\2\1\57\1\60\1\0\1\61\2\2"+
    "\1\62\1\63\1\64\1\2\1\0\2\2\1\65\1\0"+
    "\2\2\1\0\2\2\1\0\1\2\1\66\2\0\1\2"+
    "\2\0\1\67\13\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\76\0\u04d8\0\76\0\76"+
    "\0\76\0\76\0\u0516\0\u0554\0\u0592\0\u05d0\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u060e\0\76\0\u064c"+
    "\0\272\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u03a2\0\u0aa8\0\76\0\u0ae6\0\u045c\0\76"+
    "\0\76\0\u0b24\0\u0b62\0\76\0\76\0\76\0\u0ba0\0\76"+
    "\0\u0bde\0\272\0\u0c1c\0\u0c5a\0\272\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\76\0\u0ffc\0\76\0\u103a\0\76"+
    "\0\272\0\u1078\0\u10b6\0\272\0\u10f4\0\272\0\272\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\272\0\u1268\0\u12a6\0\u12e4"+
    "\0\76\0\u1322\0\272\0\272\0\272\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\272\0\272\0\u14d4\0\272\0\u1512"+
    "\0\u1550\0\272\0\272\0\272\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\272\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\272\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\272"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\4\1\7\1\10"+
    "\1\4\1\11\1\12\1\13\1\4\1\14\1\15\1\4"+
    "\1\16\2\4\1\17\1\20\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\2\15\4\1\47\100\0\1\4"+
    "\1\50\1\4\1\51\22\4\30\0\15\4\3\0\26\4"+
    "\30\0\15\4\3\0\12\4\1\52\13\4\30\0\15\4"+
    "\3\0\4\4\1\53\1\54\1\55\17\4\30\0\15\4"+
    "\3\0\5\4\1\56\4\4\1\57\13\4\30\0\15\4"+
    "\3\0\6\4\1\60\2\4\1\61\14\4\30\0\15\4"+
    "\3\0\16\4\1\62\7\4\30\0\15\4\3\0\2\4"+
    "\1\63\16\4\1\64\4\4\30\0\15\4\3\0\4\4"+
    "\1\65\21\4\30\0\15\4\3\0\4\4\1\66\21\4"+
    "\30\0\15\4\3\0\16\4\1\67\7\4\30\0\15\4"+
    "\3\0\11\4\1\70\1\71\13\4\30\0\15\4\27\0"+
    "\2\17\1\0\1\72\72\0\2\73\1\0\1\72\72\0"+
    "\1\74\1\0\1\75\46\0\31\76\1\0\44\76\32\77"+
    "\1\100\43\77\33\0\1\101\77\0\1\102\20\0\1\103"+
    "\62\0\1\104\75\0\1\105\75\0\1\106\13\0\1\107"+
    "\61\0\1\110\62\0\1\111\46\0\2\4\1\112\23\4"+
    "\30\0\15\4\3\0\15\4\1\113\10\4\30\0\15\4"+
    "\3\0\5\4\1\114\20\4\30\0\15\4\3\0\12\4"+
    "\1\115\13\4\30\0\15\4\3\0\4\4\1\116\21\4"+
    "\30\0\15\4\3\0\5\4\1\117\20\4\30\0\15\4"+
    "\3\0\16\4\1\120\7\4\30\0\15\4\3\0\13\4"+
    "\1\121\12\4\30\0\15\4\3\0\6\4\1\122\17\4"+
    "\30\0\15\4\3\0\2\4\1\123\3\4\1\124\17\4"+
    "\30\0\15\4\3\0\12\4\1\125\13\4\30\0\15\4"+
    "\3\0\1\126\25\4\30\0\15\4\3\0\5\4\1\127"+
    "\20\4\30\0\15\4\3\0\13\4\1\130\12\4\30\0"+
    "\15\4\3\0\3\4\1\131\22\4\30\0\15\4\3\0"+
    "\1\132\25\4\30\0\15\4\3\0\1\133\25\4\30\0"+
    "\15\4\27\0\2\72\74\0\2\74\100\0\1\134\74\0"+
    "\1\135\101\0\1\136\121\0\1\137\51\0\1\140\42\0"+
    "\16\4\1\141\7\4\30\0\15\4\3\0\6\4\1\142"+
    "\17\4\30\0\15\4\3\0\13\4\1\143\12\4\30\0"+
    "\15\4\3\0\4\4\1\144\21\4\30\0\15\4\3\0"+
    "\6\4\1\145\17\4\30\0\15\4\3\0\16\4\1\146"+
    "\7\4\30\0\15\4\3\0\12\4\1\147\13\4\30\0"+
    "\15\4\3\0\15\4\1\150\10\4\30\0\15\4\3\0"+
    "\17\4\1\151\6\4\30\0\15\4\3\0\1\152\25\4"+
    "\30\0\15\4\3\0\2\4\1\153\23\4\30\0\15\4"+
    "\3\0\7\4\1\154\16\4\30\0\15\4\3\0\16\4"+
    "\1\155\7\4\30\0\15\4\3\0\6\4\1\156\17\4"+
    "\30\0\15\4\3\0\4\4\1\157\21\4\30\0\15\4"+
    "\3\0\2\4\1\160\23\4\30\0\15\4\36\0\1\161"+
    "\122\0\1\162\15\0\2\4\1\163\23\4\30\0\15\4"+
    "\3\0\16\4\1\164\7\4\30\0\15\4\3\0\22\4"+
    "\1\165\3\4\30\0\15\4\3\0\12\4\1\166\13\4"+
    "\30\0\15\4\3\0\20\4\1\167\5\4\30\0\15\4"+
    "\3\0\1\4\1\170\24\4\30\0\15\4\3\0\10\4"+
    "\1\171\15\4\30\0\15\4\3\0\6\4\1\172\17\4"+
    "\30\0\15\4\3\0\15\4\1\173\10\4\30\0\15\4"+
    "\3\0\16\4\1\174\7\4\30\0\15\4\3\0\16\4"+
    "\1\175\7\4\30\0\15\4\63\0\1\176\15\0\1\4"+
    "\1\177\24\4\30\0\15\4\3\0\1\200\2\4\1\201"+
    "\22\4\30\0\15\4\3\0\14\4\1\202\11\4\30\0"+
    "\15\4\3\0\11\4\1\203\14\4\30\0\15\4\3\0"+
    "\4\4\1\204\21\4\30\0\15\4\3\0\4\4\1\205"+
    "\21\4\30\0\15\4\64\0\1\206\14\0\1\4\1\207"+
    "\24\4\30\0\15\4\3\0\4\4\1\210\21\4\30\0"+
    "\15\4\3\0\2\4\1\211\23\4\30\0\15\4\65\0"+
    "\1\212\13\0\2\4\1\213\23\4\30\0\15\4\3\0"+
    "\5\4\1\214\20\4\30\0\15\4\66\0\1\215\12\0"+
    "\16\4\1\216\7\4\30\0\15\4\3\0\6\4\1\217"+
    "\17\4\30\0\15\4\23\0\1\220\55\0\14\4\1\221"+
    "\11\4\30\0\15\4\3\0\2\4\1\222\23\4\30\0"+
    "\15\4\67\0\1\223\1\0\1\224\7\0\16\4\1\225"+
    "\7\4\30\0\15\4\70\0\1\226\74\0\1\227\11\0"+
    "\12\4\1\230\13\4\30\0\15\4\65\0\1\231\72\0"+
    "\1\232\77\0\1\233\72\0\1\234\63\0\1\161\120\0"+
    "\1\235\26\0\1\236\145\0\1\237\70\0\1\240\103\0"+
    "\1\241\76\0\1\242\66\0\1\243\56\0\1\244\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\1\1\4\11\4\1\7\11"+
    "\1\1\1\11\23\1\1\0\1\1\1\11\2\0\2\11"+
    "\2\0\3\11\1\0\1\11\1\0\22\1\1\11\1\0"+
    "\1\11\1\0\1\11\20\1\1\11\1\0\13\1\1\0"+
    "\7\1\1\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\2\0\1\1\2\0\1\1\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
// Importar las clases generadas por CUP
import java_cup.runtime.Symbol;
import java.io.*;
import java.util.HashMap;
// Tabla de símbolos para almacenar información de los tokens
HashMap<String, String> symbolTable = new HashMap<>();

// Método para agregar un token a la tabla de símbolos
void addToken(String token, String lexeme) {
    symbolTable.put(token, lexeme);
}
static final String INTEGER_TYPE = "int";
static final String FLOAT_TYPE = "float";
static final String BOOLEAN_TYPE = "bool";
static final String CHAR_TYPE = "char";
static final String STRING_TYPE = "string";
static final String GLOBAL_TYPE = "global";
static final String ID = "[a-zA-Z_][a-zA-Z0-9_]*";
static final String INT_LITERAL = "0|-?[1-9][0-9]*";
static final String FLOAT_LITERAL = "[0-9]+\\.[0-9]*";
static final String CHAR_LITERAL = "'[^']'";
static final String STRING_LITERAL = "\"[^\"]*\"";
static final String TRUE_LITERAL = "true";
static final String FALSE_LITERAL = "false";
static final String PLUS = "\\+";
static final String MINUS = "-";
static final String MULTIPLY = "\\*";
static final String DIVIDE = "/";
static final String MODULUS = "%";
static final String POWER = "\\^";
static final String INCREMENT = "\\+\\+";
static final String DECREMENT = "--";
static final String AND_OPERATOR = "\\&";
static final String OR_OPERATOR = "\\|";
static final String NOT_OPERATOR = "!";
static final String BOOL_EQUAL = "==";
static final String EQUAL = "=";
static final String NOT_EQUAL = "!=";
static final String LESS_THAN = "<";
static final String LESS_THAN_OR_EQUAL = "<=";
static final String GREATER_THAN = ">";
static final String GREATER_THAN_OR_EQUAL = ">=";
static final String COMMA = ",";
static final String SEMICOLON = ";";
static final String LEFT_PARENTHESIS = "\\(";
static final String RIGHT_PARENTHESIS = "\\)";
static final String LEFT_BRACE = "\\{";
static final String RIGHT_BRACE = "\\}";
static final String COLON = ":";
static final String IF_KEYWORD = "if";
static final String ELSE_KEYWORD = "else";
static final String WHILE_KEYWORD = "while";
static final String FOR_KEYWORD = "for";
static final String SWITCH_KEYWORD = "switch";
static final String CASE_KEYWORD = "case";
static final String DEFAULT_KEYWORD = "default";
static final String BREAK_KEYWORD = "break";
static final String RETURN_KEYWORD = "return";
static final String READ_INTEGER_FUNCTION = "read_integer";
static final String READ_FLOAT_FUNCTION = "read_float";
static final String WRITE_FUNCTION = "write";
static final String SPACE = "#";
static final String COMMENT_LINE = "//.*";
static final String COMMENT_BLOCK_START = "/\\*";
static final String COMMENT_BLOCK_END = "\\*/";
static final String COMMENT_BLOCK_CONTENT = "[^\\*]*";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignorar otros caracteres no válidos */
            } 
            // fall through
          case 57: break;
          case 2: 
            { addToken(yytext(), yytext()); return new Symbol(sym.ID, yyline, yycolumn);
            } 
            // fall through
          case 58: break;
          case 3: 
            { addToken(yytext(), yytext()); return new Symbol(sym.INT_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 4: 
            { return new Symbol(sym.MINUS, yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 5: 
            { return new Symbol(sym.PLUS, yyline, yycolumn);
            } 
            // fall through
          case 61: break;
          case 6: 
            { return new Symbol(sym.MULTIPLY, yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 7: 
            { return new Symbol(sym.DIVIDE, yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 8: 
            { return new Symbol(sym.MODULUS, yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 9: 
            { return new Symbol(sym.POWER, yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 10: 
            { return new Symbol(sym.AND_OPERATOR, yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          case 11: 
            { return new Symbol(sym.OR_OPERATOR, yyline, yycolumn);
            } 
            // fall through
          case 67: break;
          case 12: 
            { return new Symbol(sym.NOT_OPERATOR, yyline, yycolumn);
            } 
            // fall through
          case 68: break;
          case 13: 
            { return new Symbol(sym.EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 69: break;
          case 14: 
            { return new Symbol(sym.LESS_THAN, yyline, yycolumn);
            } 
            // fall through
          case 70: break;
          case 15: 
            { return new Symbol(sym.GREATER_THAN, yyline, yycolumn);
            } 
            // fall through
          case 71: break;
          case 16: 
            { return new Symbol(sym.COMMA, yyline, yycolumn);
            } 
            // fall through
          case 72: break;
          case 17: 
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn);
            } 
            // fall through
          case 73: break;
          case 18: 
            { return new Symbol(sym.LEFT_PARENTHESIS, yyline, yycolumn);
            } 
            // fall through
          case 74: break;
          case 19: 
            { return new Symbol(sym.RIGHT_PARENTHESIS, yyline, yycolumn);
            } 
            // fall through
          case 75: break;
          case 20: 
            { return new Symbol(sym.LEFT_BRACE, yyline, yycolumn);
            } 
            // fall through
          case 76: break;
          case 21: 
            { return new Symbol(sym.RIGHT_BRACE, yyline, yycolumn);
            } 
            // fall through
          case 77: break;
          case 22: 
            { return new Symbol(sym.COLON, yyline, yycolumn);
            } 
            // fall through
          case 78: break;
          case 23: 
            { /* Contar líneas */ yyline++;
            } 
            // fall through
          case 79: break;
          case 24: 
            { return new Symbol(sym.IF_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 25: 
            { addToken(yytext(), yytext()); return new Symbol(sym.FLOAT_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 26: 
            { return new Symbol(sym.DECREMENT, yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 27: 
            { addToken(yytext(), yytext()); return new Symbol(sym.STRING_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 28: 
            { return new Symbol(sym.INCREMENT, yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 29: 
            { return new Symbol(sym.NOT_EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 30: 
            { return new Symbol(sym.BOOL_EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 31: 
            { return new Symbol(sym.LESS_THAN_OR_EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 32: 
            { return new Symbol(sym.GREATER_THAN_OR_EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 33: 
            { addToken("int", yytext()); return new Symbol(sym.INTEGER_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 34: 
            { return new Symbol(sym.FOR_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 35: 
            { addToken(yytext(), yytext()); return new Symbol(sym.CHAR_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 91: break;
          case 36: 
            { /* Iniciar modo de comentario de bloque */ yybegin(1);
            } 
            // fall through
          case 92: break;
          case 37: 
            { /* Ignorar espacios en blanco */
            } 
            // fall through
          case 93: break;
          case 38: 
            { addToken("true", yytext()); return new Symbol(sym.TRUE_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 94: break;
          case 39: 
            { addToken("bool", yytext()); return new Symbol(sym.BOOLEAN_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 95: break;
          case 40: 
            { return new Symbol(sym.CASE_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 96: break;
          case 41: 
            { addToken("char", yytext()); return new Symbol(sym.CHAR_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 97: break;
          case 42: 
            { return new Symbol(sym.ELSE_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 43: 
            { /* Ignorar comentarios de una línea */
            } 
            // fall through
          case 99: break;
          case 44: 
            { addToken("float", yytext()); return new Symbol(sym.FLOAT_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 100: break;
          case 45: 
            { addToken("false", yytext()); return new Symbol(sym.FALSE_LITERAL, yyline, yycolumn);
            } 
            // fall through
          case 101: break;
          case 46: 
            { return new Symbol(sym.BREAK_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 102: break;
          case 47: 
            { return new Symbol(sym.WHILE_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 103: break;
          case 48: 
            { addToken("write", yytext()); return new Symbol(sym.WRITE_FUNCTION, yyline, yycolumn);
            } 
            // fall through
          case 104: break;
          case 49: 
            { return new Symbol(sym.RETURN_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 105: break;
          case 50: 
            { addToken("string", yytext()); return new Symbol(sym.STRING_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 106: break;
          case 51: 
            { return new Symbol(sym.SWITCH_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 107: break;
          case 52: 
            { addToken("global", yytext()); return new Symbol(sym.GLOBAL_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 108: break;
          case 53: 
            { return new Symbol(sym.DEFAULT_KEYWORD, yyline, yycolumn);
            } 
            // fall through
          case 109: break;
          case 54: 
            { addToken("read_float", yytext()); return new Symbol(sym.READ_FLOAT_FUNCTION, yyline, yycolumn);
            } 
            // fall through
          case 110: break;
          case 55: 
            { addToken("read_integer", yytext()); return new Symbol(sym.READ_INTEGER_FUNCTION, yyline, yycolumn);
            } 
            // fall through
          case 111: break;
          case 56: 
            { /* Iniciar modo de comentario de bloque */ yybegin(2);
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
