import gen.Scanner;
import java_cup.runtime.*;
import java.io.IOException;

parser code {:
    Scanner s;
    Parser(Scanner, s);{
     this.s = s;
    }
 :}

init with {: s.init(); :};

scan with {: return s.next_token(); :};

terminal INTEGER_TYPE, FLOAT_TYPE, BOOLEAN_TYPE, CHAR_TYPE, STRING_TYPE, GLOBAL_TYPE, ID;
terminal INT_LITERAL, FLOAT_LITERAL, CHAR_LITERAL, STRING_LITERAL, TRUE_LITERAL, FALSE_LITERAL;
terminal PLUS, MINUS, TIMES, DIVIDE, MODULUS, POWER;
terminal INCREMENT, DECREMENT, AND_OPERATOR, OR_OPERATOR, NOT_OPERATOR;
terminal BOOL_EQUAL, EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL;
terminal COMMA, SEMICOLON, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACE, RIGHT_BRACE;
terminal IF_KEYWORD, ELSE_KEYWORD, WHILE_KEYWORD, FOR_KEYWORD, SWITCH_KEYWORD, CASE_KEYWORD, DEFAULT_KEYWORD;
terminal BREAK_KEYWORD, RETURN_KEYWORD, READ_INTEGER_FUNCTION, READ_FLOAT_FUNCTION, WRITE_FUNCTION;
terminal SPACE, COMMENT_LINE, COMMENT_BLOCK_START, COMMENT_BLOCK_END;

/* No Terminales */
nonterminal operand, returnType, block, statementList, statement, declaration,
    assignment, expression, term, IfStatement, elseBlock, forLoop, whileLoop,
    condition, loop;


/* Operadores */
precedence left AND_OPERATOR, OR_OPERATOR;
precedence left EQUAL, NOT_EQUAL, BOOL_EQUAL;
precedence left LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MODULUS, POWER;
precedence left INCREMENT, DECREMENT;
precedence right NOT_OPERATOR;

/* Producciones */
start with program;

/* Producciones */
program ::= function main_function_declaration ;

function ::= returnType SPACE ID LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE SEMICOLON;

main_function_declaration ::= returnTypeype SPACE main_keyword LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE SEMICOLON;

return_type ::= INTEGER_TYPE
                | FLOAT_TYPE
                | BOOLEAN_TYPE
                | CHAR_TYPE
                | STRING_TYPE;

parameter_list ::= parameter | parameter COMMA parameter_list;

parameter ::= returnType ID;

statement_list ::= statement | statement statement_list;

statement ::= variable_declaration
           |
           | if_statement
           | else_statement
           | while_statement
           | for_statement
           | switch_statement
           | case_list default_case
           | expression_statement
           | return_statement
           | break_statement;



variable_declaration ::= returnType SPACE ID SEMICOLON;

variable_declaration ::= returnType SPACE ID EQUAL term SEMICOLON;

global_variable_dec ::= GLOBAL_TYPE SPACE ID SEMICOLON;

global_variable_dec ::= GLOBAL_TYPE SPACE ID EQUAL term;

assignment_statement ::= ID EQUAL expression SEMICOLON;

if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE;




